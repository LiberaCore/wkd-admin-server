import os
import tempfile

import pytest
import requests


# test authentication without providing a token
def test_auth_get():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.get(url)
    assert resp.status_code == 401

def test_auth_post():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.post(url)
    assert resp.status_code == 401

def test_auth_delete():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.delete(url)
    assert resp.status_code == 401


# Test authentication with right token
def test_auth_get_success():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.get(url, headers={'X-API-Key': '12345678'})
    assert resp.status_code == 200

def test_auth_post_success():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.post(url, headers={'X-API-Key': '12345678'})
    assert resp.status_code != 401

def test_auth_delete_success():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.delete(url, headers={'X-API-Key': '12345678'})
    assert resp.status_code == 200


# Test authentication with wrong token
def test_auth_get_fail():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.get(url, headers={'X-API-Key': '123'})
    assert resp.status_code == 401

def test_auth_post_fail():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.post(url, headers={'X-API-Key': '123'})
    assert resp.status_code == 401

def test_auth_delete_fail():
    url = 'http://127.0.0.1:5000/admin/key/test@test.de'
    resp = requests.delete(url, headers={'X-API-Key': '123'})
    assert resp.status_code == 401


def test_key_upload_success():
    url = 'http://127.0.0.1:5000/admin/key/test@test.test'
    request_body = { 'key': ' "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUdOQkYzTmJJd0JEQURaUVQ2RWVYTURDb0tXZVFqN2EvS1ZZQzhtODZBdGQzVnEyQXZ5b3dWTTZwN0VIcmJoCnBqTXZ3OTU0SlZqUFRPKzBxV3h0UkJsNGtOWWZvY01RRUFDWEJCZzlPSTRxUWhralBKVUVUQ1RKRlFGUGtaNEkKQ0lWZXdIZzhpU2RFQzZEUzNXdG1sYTlQQ0lBYWtFWDJoY1E0cU1aSzliZkFMSFJwL3hTUjVheGcrTllENlNkOQpHRFRIc25ySUFwTGZ4S0YyY1FLak5ZUURYNEtNbjB3MlZJWEJyb3Y4cXVPQTdNakZ4TWlDTmVTbmZpbThVcy8yCk5XaGlHSHZOWVdLSjdVMEk2ZGFHRFg0Y3k4N0pBWm9ZenpWV0c1WmIvOEY0T2p1NXpXaW5uOUhkSEVwRGpCdTUKcit3cUhDWGtzQzVUUW5sMjJXQUNMKzlmLzNjRmYzMnRqQS9VRERLU2JzRzU1dVpsRlFyWFM0eG9MWkVxTzJ3Ywo4RnlEc29GclZZVnc1ZGR3NDBjREVFN0IvcTV6NG1MUHFOb3BBQ0kxVk9sYVhoU2ZUai9weVlPSkNaTStZcXkzCjgzWEhJRExzbFlwazBGaXdJOTRnVUo0RXdJbEYvekswbGxnNXFxMTlQNS92cktCM2xkTUo2NWlXWmh3ZnFUYmEKOFYwSmxWZURwOGphVmk4QUVRRUFBYlFhVkdWemRDQjBaWE4wSUR4MFpYTjBRSFJsYzNRdWRHVnpkRDZKQWRRRQpFd0VJQUQ0V0lRUU92Tm5WT0QxazdmbjZKbnYycUdBbi9LSVRtQVVDWGMxc2pBSWJBd1VKQThKbkFBVUxDUWdICkFnWVZDZ2tJQ3dJRUZnSURBUUllQVFJWGdBQUtDUkQycUdBbi9LSVRtTHp5Qy80bWZDUDlibDVnZ0ZyZi95VXcKa1kzTmNXeFBjcmZvRndPVFJtQzlzVzRCbHBvYTJYSG5yaW5DZzVPV0x4bU1HckpXd0ZYN09OT3JTUXdaOTdUawpKc00zUnd3ZGlzRVI4YWdvWTB6ZXF0Z3kxWmkxQkxSNTR5WTFhYzBXZHNub3psRWZlVGhPTkZUQTVORHgwVnFRCkIwS3RLSkxIbGdDUVU1MlBjWjRzMnJvejNFS092Y2ZRZUwyY3MvaWs5MTd0am9nMExTV2JoakJSSWRzVW9wcFMKMGR4eGlBeFREODN0NTNGelNIUCtVUzlTZ1BsN1BuU0tYblpPNkNaL2RiVnl6ZjZYQytrUXFOSXFXckVaNitCVQpqMFE1Z3IvQjdlVkYrcXlWbmpMRTQwdld0VHp5WG45d3ZtUldUbDQra0p6TFpYem5HTGRHbHF5dkF0NGxnUDA4ClRtWUxBSmVaem9YdEMySWc4d3IzVk9NTzVMYkFxR2xwWkVWajU5WVptaytnNHNEZ2lNNE5taXZYM1RmSTYwYXUKYW5wZlhGUnBGRFNDMW0zRTRmQk1wSkhkUnZwL2hsYUpYa2tSZzRqbmlPZndRWDJkUjdnbnhzVXFoVmpSdVVzdgpxOXFwTmdTRlEyMis0Mk91VFIxWHdIcXptaEZrMTBiNklCcGJVQWp0cXdPTzRtVzVBWTBFWGMxc2pBRU1BTDhFCm9MSXVGdjBtT0oySCtveXdjcGVTU29yZHAwOEU2QTk4R3hySTZXNmx5MElCSmRKTXErUlR6YWtmeUdnbDZJVUMKU1NvVVpGUFZSd1M1ODcvdkx0SXVCVjd1VzVHT3VRSHJkUjdoZ0IwNldEbU8zcE5jNlZmOWxGZTJOelNFY3VUcQo4UjRHNU5CTW9nSk1vR29FYWlEM1M0bXRndTNBZDBaTVkxY29BTm1STFVSenRXM2RQTFgra2lCQzNTU2IwNGU2CnEwaHBoS082ajZnY2tiUEl4ZXhUdnBrdXV1NVloOS93Y2tlTDE1aEdmbDJDOXZDVll5bFF2RDBTV1ljOVF4QnMKbEdyK05KRG1MMWVvTEF2aHprZXluWDJHVytBZTR5ZmphWXBUZTl0VnNqaFAvbXhCSGd3WUplWHI2TFQ0WkkyZQo5ZkZJY05YUERraEF1YnVkbDAycHRrZjZCL2N3Rnl1SzFXMm5vTG1NcFlWNk5yWG80UGZUckdGNTBySnMwcjNTCjMwMkpIR2NjTHVlUkRwMyttZVdyblU5a3JIY05SSkl5SW1Nb0NYRFlYSWZXdzNKdTh3STg1cGJJUDZrb1JRTGIKcXJlVERwd3dzaVNMTlVPbmlzVWdOaGNtRTBXZUR5N3pHRFN3ZUorR3dkdTZRUkdud0xITEVtb3dlTnZRNndBUgpBUUFCaVFHOEJCZ0JDQUFtRmlFRURyeloxVGc5Wk8zNStpWjc5cWhnSi95aUU1Z0ZBbDNOYkl3Q0d3d0ZDUVBDClp3QUFDZ2tROXFoZ0oveWlFNWpKa2d2L2FJS2duNlg2bEpkRmUxamEvRFBZbmpBbnRPK1MzMkNOTmF5Z05XdGgKR2RmdFNTSHNjSmdEeVNTU25ERWs4VE5JTkJkL2cvWHlDWlFReXJXeTY3QndXNUZxOFhpUGNWcXRxSUl2elR4UgpUcnBucGVVNm5FUC9tSzluL3FrZm1MenV5L2JnSWhDNzBEU2pyYU54MHQwSVZJL1hSdEw5YU05WUtXKzNPTmdYCkJLZm5OZm1vVW8xcVR5bFpCbEZHNVFsbFJ6YWpxK2l3MjQrVzh5NmlpTXpKRklpbU1scE1DTHEzd1Exd0lVdDMKa1ZaR2dXNm1LQndUcitrcnluVVVtY1VrVWxBUHQvVnc1NUNpQkpYd0FMbXJ5cUhsUFVJa1ZGSERsNVJvbkdnVwpqR2FCTkZUNVkwOVlXaHY3WGY5bEZKQW1idjhEamV4bHRvcjNPa0xTSCsxTXd6MkRaY1I5VXF3U1ZGS2QyNC93CmVhTTdDVTJqM29yeE1CSGhYcDRzS2V0VC9wdjE3NHdSbjZMSmVKVVQ5elEwRzVCOGpmczg2citubWl6MktwRXUKcUEvMlpsb203cWY5bE5KTEcyeWx6bXc5K1lkOTI1STFCZ2RmYkcrUGVEb1NiYm9iaDN1bVdkd3BnVVh1VlhIMApDdG5aS2ZuN05KVVpsV1QyZTlxYVVQMmQKPXE0Ni8KLS0tLS1FTkQgUEdQIFBVQkxJQyBLRVkgQkxPQ0stLS0tLQo='}
    resp = requests.post(url, headers={'X-API-Key': '12345678'}, json=request_body)
    assert resp.status_code == 200


def test_key_upload_with_wrong_email_in_url():
    url = 'http://127.0.0.1:5000/admin/key/test1234@test.test'
    request_body = { 'key': ' "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUdOQkYzTmJJd0JEQURaUVQ2RWVYTURDb0tXZVFqN2EvS1ZZQzhtODZBdGQzVnEyQXZ5b3dWTTZwN0VIcmJoCnBqTXZ3OTU0SlZqUFRPKzBxV3h0UkJsNGtOWWZvY01RRUFDWEJCZzlPSTRxUWhralBKVUVUQ1RKRlFGUGtaNEkKQ0lWZXdIZzhpU2RFQzZEUzNXdG1sYTlQQ0lBYWtFWDJoY1E0cU1aSzliZkFMSFJwL3hTUjVheGcrTllENlNkOQpHRFRIc25ySUFwTGZ4S0YyY1FLak5ZUURYNEtNbjB3MlZJWEJyb3Y4cXVPQTdNakZ4TWlDTmVTbmZpbThVcy8yCk5XaGlHSHZOWVdLSjdVMEk2ZGFHRFg0Y3k4N0pBWm9ZenpWV0c1WmIvOEY0T2p1NXpXaW5uOUhkSEVwRGpCdTUKcit3cUhDWGtzQzVUUW5sMjJXQUNMKzlmLzNjRmYzMnRqQS9VRERLU2JzRzU1dVpsRlFyWFM0eG9MWkVxTzJ3Ywo4RnlEc29GclZZVnc1ZGR3NDBjREVFN0IvcTV6NG1MUHFOb3BBQ0kxVk9sYVhoU2ZUai9weVlPSkNaTStZcXkzCjgzWEhJRExzbFlwazBGaXdJOTRnVUo0RXdJbEYvekswbGxnNXFxMTlQNS92cktCM2xkTUo2NWlXWmh3ZnFUYmEKOFYwSmxWZURwOGphVmk4QUVRRUFBYlFhVkdWemRDQjBaWE4wSUR4MFpYTjBRSFJsYzNRdWRHVnpkRDZKQWRRRQpFd0VJQUQ0V0lRUU92Tm5WT0QxazdmbjZKbnYycUdBbi9LSVRtQVVDWGMxc2pBSWJBd1VKQThKbkFBVUxDUWdICkFnWVZDZ2tJQ3dJRUZnSURBUUllQVFJWGdBQUtDUkQycUdBbi9LSVRtTHp5Qy80bWZDUDlibDVnZ0ZyZi95VXcKa1kzTmNXeFBjcmZvRndPVFJtQzlzVzRCbHBvYTJYSG5yaW5DZzVPV0x4bU1HckpXd0ZYN09OT3JTUXdaOTdUawpKc00zUnd3ZGlzRVI4YWdvWTB6ZXF0Z3kxWmkxQkxSNTR5WTFhYzBXZHNub3psRWZlVGhPTkZUQTVORHgwVnFRCkIwS3RLSkxIbGdDUVU1MlBjWjRzMnJvejNFS092Y2ZRZUwyY3MvaWs5MTd0am9nMExTV2JoakJSSWRzVW9wcFMKMGR4eGlBeFREODN0NTNGelNIUCtVUzlTZ1BsN1BuU0tYblpPNkNaL2RiVnl6ZjZYQytrUXFOSXFXckVaNitCVQpqMFE1Z3IvQjdlVkYrcXlWbmpMRTQwdld0VHp5WG45d3ZtUldUbDQra0p6TFpYem5HTGRHbHF5dkF0NGxnUDA4ClRtWUxBSmVaem9YdEMySWc4d3IzVk9NTzVMYkFxR2xwWkVWajU5WVptaytnNHNEZ2lNNE5taXZYM1RmSTYwYXUKYW5wZlhGUnBGRFNDMW0zRTRmQk1wSkhkUnZwL2hsYUpYa2tSZzRqbmlPZndRWDJkUjdnbnhzVXFoVmpSdVVzdgpxOXFwTmdTRlEyMis0Mk91VFIxWHdIcXptaEZrMTBiNklCcGJVQWp0cXdPTzRtVzVBWTBFWGMxc2pBRU1BTDhFCm9MSXVGdjBtT0oySCtveXdjcGVTU29yZHAwOEU2QTk4R3hySTZXNmx5MElCSmRKTXErUlR6YWtmeUdnbDZJVUMKU1NvVVpGUFZSd1M1ODcvdkx0SXVCVjd1VzVHT3VRSHJkUjdoZ0IwNldEbU8zcE5jNlZmOWxGZTJOelNFY3VUcQo4UjRHNU5CTW9nSk1vR29FYWlEM1M0bXRndTNBZDBaTVkxY29BTm1STFVSenRXM2RQTFgra2lCQzNTU2IwNGU2CnEwaHBoS082ajZnY2tiUEl4ZXhUdnBrdXV1NVloOS93Y2tlTDE1aEdmbDJDOXZDVll5bFF2RDBTV1ljOVF4QnMKbEdyK05KRG1MMWVvTEF2aHprZXluWDJHVytBZTR5ZmphWXBUZTl0VnNqaFAvbXhCSGd3WUplWHI2TFQ0WkkyZQo5ZkZJY05YUERraEF1YnVkbDAycHRrZjZCL2N3Rnl1SzFXMm5vTG1NcFlWNk5yWG80UGZUckdGNTBySnMwcjNTCjMwMkpIR2NjTHVlUkRwMyttZVdyblU5a3JIY05SSkl5SW1Nb0NYRFlYSWZXdzNKdTh3STg1cGJJUDZrb1JRTGIKcXJlVERwd3dzaVNMTlVPbmlzVWdOaGNtRTBXZUR5N3pHRFN3ZUorR3dkdTZRUkdud0xITEVtb3dlTnZRNndBUgpBUUFCaVFHOEJCZ0JDQUFtRmlFRURyeloxVGc5Wk8zNStpWjc5cWhnSi95aUU1Z0ZBbDNOYkl3Q0d3d0ZDUVBDClp3QUFDZ2tROXFoZ0oveWlFNWpKa2d2L2FJS2duNlg2bEpkRmUxamEvRFBZbmpBbnRPK1MzMkNOTmF5Z05XdGgKR2RmdFNTSHNjSmdEeVNTU25ERWs4VE5JTkJkL2cvWHlDWlFReXJXeTY3QndXNUZxOFhpUGNWcXRxSUl2elR4UgpUcnBucGVVNm5FUC9tSzluL3FrZm1MenV5L2JnSWhDNzBEU2pyYU54MHQwSVZJL1hSdEw5YU05WUtXKzNPTmdYCkJLZm5OZm1vVW8xcVR5bFpCbEZHNVFsbFJ6YWpxK2l3MjQrVzh5NmlpTXpKRklpbU1scE1DTHEzd1Exd0lVdDMKa1ZaR2dXNm1LQndUcitrcnluVVVtY1VrVWxBUHQvVnc1NUNpQkpYd0FMbXJ5cUhsUFVJa1ZGSERsNVJvbkdnVwpqR2FCTkZUNVkwOVlXaHY3WGY5bEZKQW1idjhEamV4bHRvcjNPa0xTSCsxTXd6MkRaY1I5VXF3U1ZGS2QyNC93CmVhTTdDVTJqM29yeE1CSGhYcDRzS2V0VC9wdjE3NHdSbjZMSmVKVVQ5elEwRzVCOGpmczg2citubWl6MktwRXUKcUEvMlpsb203cWY5bE5KTEcyeWx6bXc5K1lkOTI1STFCZ2RmYkcrUGVEb1NiYm9iaDN1bVdkd3BnVVh1VlhIMApDdG5aS2ZuN05KVVpsV1QyZTlxYVVQMmQKPXE0Ni8KLS0tLS1FTkQgUEdQIFBVQkxJQyBLRVkgQkxPQ0stLS0tLQo='}
    resp = requests.post(url, headers={'X-API-Key': '12345678'}, json=request_body)
    assert resp.status_code == 500

# //TODO: generate and use new wrong key
'''
def test_key_upload_with_wrong_key():
    url = 'http://127.0.0.1:5000/admin/key/test@test.test'
    request_body = { 'key': ' "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUdOQkYzTmJJd0JEQURaUVQ2RWVYTURDb0tXZVFqN2EvS1ZZQzhtODZBdGQzVnEyQXZ5b3dWTTZwN0VIcmJoCnBqTXZ3OTU0SlZqUFRPKzBxV3h0UkJsNGtOWWZvY01RRUFDWEJCZzlPSTRxUWhralBKVUVUQ1RKRlFGUGtaNEkKQ0lWZXdIZzhpU2RFQzZEUzNXdG1sYTlQQ0lBYWtFWDJoY1E0cU1aSzliZkFMSFJwL3hTUjVheGcrTllENlNkOQpHRFRIc25ySUFwTGZ4S0YyY1FLak5ZUURYNEtNbjB3MlZJWEJyb3Y4cXVPQTdNakZ4TWlDTmVTbmZpbThVcy8yCk5XaGlHSHZOWVdLSjdVMEk2ZGFHRFg0Y3k4N0pBWm9ZenpWV0c1WmIvOEY0T2p1NXpXaW5uOUhkSEVwRGpCdTUKcit3cUhDWGtzQzVUUW5sMjJXQUNMKzlmLzNjRmYzMnRqQS9VRERLU2JzRzU1dVpsRlFyWFM0eG9MWkVxTzJ3Ywo4RnlEc29GclZZVnc1ZGR3NDBjREVFN0IvcTV6NG1MUHFOb3BBQ0kxVk9sYVhoU2ZUai9weVlPSkNaTStZcXkzCjgzWEhJRExzbFlwazBGaXdJOTRnVUo0RXdJbEYvekswbGxnNXFxMTlQNS92cktCM2xkTUo2NWlXWmh3ZnFUYmEKOFYwSmxWZURwOGphVmk4QUVRRUFBYlFhVkdWemRDQjBaWE4wSUR4MFpYTjBRSFJsYzNRdWRHVnpkRDZKQWRRRQpFd0VJQUQ0V0lRUU92Tm5WT0QxazdmbjZKbnYycUdBbi9LSVRtQVVDWGMxc2pBSWJBd1VKQThKbkFBVUxDUWdICkFnWVZDZ2tJQ3dJRUZnSURBUUllQVFJWGdBQUtDUkQycUdBbi9LSVRtTHp5Qy80bWZDUDlibDVnZ0ZyZi95VXcKa1kzTmNXeFBjcmZvRndPVFJtQzlzVzRCbHBvYTJYSG5yaW5DZzVPV0x4bU1HckpXd0ZYN09OT3JTUXdaOTdUawpKc00zUnd3ZGlzRVI4YWdvWTB6ZXF0Z3kxWmkxQkxSNTR5WTFhYzBXZHNub3psRWZlVGhPTkZUQTVORHgwVnFRCkIwS3RLSkxIbGdDUVU1MlBjWjRzMnJvejNFS092Y2ZRZUwyY3MvaWs5MTd0am9nMExTV2JoakJSSWRzVW9wcFMKMGR4eGlBeFREODN0NTNGelNIUCtVUzlTZ1BsN1BuU0tYblpPNkNaL2RiVnl6ZjZYQytrUXFOSXFXckVaNitCVQpqMFE1Z3IvQjdlVkYrcXlWbmpMRTQwdld0VHp5WG45d3ZtUldUbDQra0p6TFpYem5HTGRHbHF5dkF0NGxnUDA4ClRtWUxBSmVaem9YdEMySWc4d3IzVk9NTzVMYkFxR2xwWkVWajU5WVptaytnNHNEZ2lNNE5taXZYM1RmSTYwYXUKYW5wZlhGUnBGRFNDMW0zRTRmQk1wSkhkUnZwL2hsYUpYa2tSZzRqbmlPZndRWDJkUjdnbnhzVXFoVmpSdVVzdgpxOXFwTmdTRlEyMis0Mk91VFIxWHdIcXptaEZrMTBiNklCcGJVQWp0cXdPTzRtVzVBWTBFWGMxc2pBRU1BTDhFCm9MSXVGdjBtT0oySCtveXdjcGVTU29yZHAwOEU2QTk4R3hySTZXNmx5MElCSmRKTXErUlR6YWtmeUdnbDZJVUMKU1NvVVpGUFZSd1M1ODcvdkx0SXVCVjd1VzVHT3VRSHJkUjdoZ0IwNldEbU8zcE5jNlZmOWxGZTJOelNFY3VUcQo4UjRHNU5CTW9nSk1vR29FYWlEM1M0bXRndTNBZDBaTVkxY29BTm1STFVSenRXM2RQTFgra2lCQzNTU2IwNGU2CnEwaHBoS082ajZnY2tiUEl4ZXhUdnBrdXV1NVloOS93Y2tlTDE1aEdmbDJDOXZDVll5bFF2RDBTV1ljOVF4QnMKbEdyK05KRG1MMWVvTEF2aHprZXluWDJHVytBZTR5ZmphWXBUZTl0VnNqaFAvbXhCSGd3WUplWHI2TFQ0WkkyZQo5ZkZJY05YUERraEF1YnVkbDAycHRrZjZCL2N3Rnl1SzFXMm5vTG1NcFlWNk5yWG80UGZUckdGNTBySnMwcjNTCjMwMkpIR2NjTHVlUkRwMyttZVdyblU5a3JIY05SSkl5SW1Nb0NYRFlYSWZXdzNKdTh3STg1cGJJUDZrb1JRTGIKcXJlVERwd3dzaVNMTlVPbmlzVWdOaGNtRTBXZUR5N3pHRFN3ZUorR3dkdTZRUkdud0xITEVtb3dlTnZRNndBUgpBUUFCaVFHOEJCZ0JDQUFtRmlFRURyeloxVGc5Wk8zNStpWjc5cWhnSi95aUU1Z0ZBbDNOYkl3Q0d3d0ZDUVBDClp3QUFDZ2tROXFoZ0oveWlFNWpKa2d2L2FJS2duNlg2bEpkRmUxamEvRFBZbmpBbnRPK1MzMkNOTmF5Z05XdGgKR2RmdFNTSHNjSmdEeVNTU25ERWs4VE5JTkJkL2cvWHlDWlFReXJXeTY3QndXNUZxOFhpUGNWcXRxSUl2elR4UgpUcnBucGVVNm5FUC9tSzluL3FrZm1MenV5L2JnSWhDNzBEU2pyYU54MHQwSVZJL1hSdEw5YU05WUtXKzNPTmdYCkJLZm5OZm1vVW8xcVR5bFpCbEZHNVFsbFJ6YWpxK2l3MjQrVzh5NmlpTXpKRklpbU1scE1DTHEzd1Exd0lVdDMKa1ZaR2dXNm1LQndUcitrcnluVVVtY1VrVWxBUHQvVnc1NUNpQkpYd0FMbXJ5cUhsUFVJa1ZGSERsNVJvbkdnVwpqR2FCTkZUNVkwOVlXaHY3WGY5bEZKQW1idjhEamV4bHRvcjNPa0xTSCsxTXd6MkRaY1I5VXF3U1ZGS2QyNC93CmVhTTdDVTJqM29yeE1CSGhYcDRzS2V0VC9wdjE3NHdSbjZMSmVKVVQ5elEwRzVCOGpmczg2citubWl6MktwRXUKcUEvMlpsb203cWY5bE5KTEcyeWx6bXc5K1lkOTI1STFCZ2RmYkcrUGVEb1NiYm9iaDN1bVdkd3BnVVh1VlhIMApDdG5aS2ZuN05KVVpsV1QyZTlxYVVQMmQKPXE0Ni8KLS0tLS1FTkQgUEdQIFBVQkxJQyBLRVkgQkxPQ0stLS0tLQo='}
    resp = requests.post(url, headers={'X-API-Key': '12345678'}, json=request_body)
    assert resp.status_code == 500
'''
def test_get_key_exists():
    url = 'http://127.0.0.1:5000/admin/key/test@test.test'
    resp = requests.get(url, headers={'X-API-Key': '12345678'})
    json_response = resp.json()
    assert json_response['status'] == True

def test_delete_key_exists():
    url = 'http://127.0.0.1:5000/admin/key/test@test.test'
    resp = requests.delete(url, headers={'X-API-Key': '12345678'})
    json_response = resp.json()
    assert json_response['status'] == True

def test_delete_key_does_not_exist():
    url = 'http://127.0.0.1:5000/admin/key/test@test.test'
    resp = requests.delete(url, headers={'X-API-Key': '12345678'})
    json_response = resp.json()
    assert json_response['status'] == False

def test_get_key_does_not_exist():
    url = 'http://127.0.0.1:5000/admin/key/test@test.test'
    resp = requests.get(url, headers={'X-API-Key': '12345678'})
    json_response = resp.json()
    assert json_response['status'] == False
